df <- event_data %>%
dplyr::filter(Manufacturer == mfg) %>%
dplyr::arrange(Gender, Age_Group)
df$Age_Group <- factor(df$Age_Group, levels = all_age_groups)
# Only draw lines where each Gender group has >= 2 non-NA points
line_df <- df %>%
dplyr::group_by(Gender) %>%
dplyr::filter(sum(!is.na(Percentage)) >= 2) %>%
dplyr::ungroup()
ggplot2::ggplot(df, ggplot2::aes(x = Age_Group, y = Percentage, group = Gender, color = Gender)) +
ggplot2::geom_line(data = line_df, linewidth = 1.5) +  # avoids 1-point line warnings
ggplot2::geom_point(size = 4) +
ggplot2::scale_x_discrete(drop = FALSE) +
ggplot2::scale_color_manual(values = gender_colors) +
ggplot2::coord_cartesian(ylim = c(0, max_y)) +
ggplot2::theme_minimal() +
ggplot2::labs(title = mfg, x = "Age Group", y = "Percentage of Cases (%)") +
ggplot2::theme(
plot.title = ggplot2::element_text(size = 16, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
axis.text.x  = ggplot2::element_text(size = 12, angle = 45, hjust = 1),
axis.text.y  = ggplot2::element_text(size = 12),
legend.title = ggplot2::element_text(size = 12),
legend.text  = ggplot2::element_text(size = 10)
)
})
line_plot <- patchwork::wrap_plots(plots, ncol = 5) +
patchwork::plot_layout(ncol = 5) +
patchwork::plot_annotation(
title = event,
theme = ggplot2::theme(
plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5)
)
) &
ggplot2::theme(plot.margin = ggplot2::margin(t = 10, b = 20, l = 10, r = 10))
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.png")),
plot = line_plot, width = 18, height = 4, bg = "white"
)
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.pdf")),
plot = line_plot, width = 18, height = 4, device = cairo_pdf
)
}
################################################################################
################################  Run Jobs  ####################################
################################################################################
for (event in target_events) {
tryCatch({
plot_adverse_event(event)
}, error = function(e) {
message(paste("Skipping", event, "due to error:", e$message))
})
}
getwd()
install.packages("renv")
renv::init()
# Make sure CRAN+Bioc repos are captured
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
options(repos = BiocManager::repositories())
# Run your scripts once (pacman installs into the renv library), then:
renv::snapshot(prompt = FALSE)
renv::restore()
################################################################################
# This script parses downloaded Excel files named like:
#   <prefix>_(<MANUFACTURER>)_<AGE_GROUP>_<GENDER>.xlsx
# It extracts targeted adverse events, computes % of AE cases by total cases,
# writes a combined table, and generates per-event line plots (Female vs Male)
# across age groups for each manufacturer using patchwork.
################################################################################
################################################################################
###############################  Packages  #####################################
################################################################################
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library(pacman)
# Required CRAN packages
cran_packages <- c(
"readxl", "writexl", "tidyverse", "ggplot2", "ComplexUpset",
"UpSetR", "ComplexHeatmap", "patchwork"
)
# Install & load
p_load(char = cran_packages, install = TRUE)
################################################################################
####################  Set Current Working Directory  ###########################
################################################################################
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
print(current_path)
# Note: base_dir points to a subfolder relative to this file
base_dir  <- paste0(dirname(current_path), "/vaxafe_male-vs-female_age/")
data_dir  <- paste0(base_dir, "downloaded/")
output_dir <- file.path(base_dir, "/", "top_age_vs_gender_output")
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
################################################################################
#####################  Read and Process Excel Files ############################
################################################################################
excel_files <- list.files(data_dir, pattern = "\\.xlsx$", full.names = TRUE)
valid_manufacturers <- c(
"PFIZER-BIONTECH_BIVALENT", "PFIZER-BIONTECH", "MODERNA",
"MODERNA_BIVALENT", "JANSSEN"
)
valid_genders <- c("Female", "Male")
target_events <- c(
"Injection site pruritus","Vaccination site warmth","Vaccination site pruritus",
"Vaccination site erythema","Paraesthesia oral","Injection site rash",
"Vaccination site swelling","Swollen tongue","Vaccination site rash",
"Lymph node pain","Vaccination site reaction","Hypoaesthesia oral",
"Axillary pain","Pharyngeal swelling","Aphonia","Migraine","Throat irritation",
"Hot flush","Lymphadenopathy","Dysgeusia","Contusion","Myocarditis",
"Troponin increased","Acute myocardial infarction","Death","Pericarditis",
"Mechanical ventilation","Myocardial infarction","Acute kidney injury",
"Blood creatinine increased","Sepsis","Acute respiratory failure",
"Obstructive sleep apnoea syndrome","Atrial fibrillation","Hypoxia",
"Angiogram pulmonary abnormal","Echocardiogram abnormal","Respiratory failure",
"Deep vein thrombosis","Electrocardiogram abnormal",
"Computerised tomogram thorax abnormal","Ultrasound Doppler abnormal",
"Thrombosis", "Guillain-Barre syndrome"
)
results_df <- data.frame()
for (file in excel_files) {
file_name <- tools::file_path_sans_ext(basename(file))
file_info <- str_match(file_name, "^(.*?)_\\((.*?)\\)_(.*?)_(.*?)$")
if (is.na(file_info[1, 1])) next
manufacturer <- file_info[3]
age_group    <- file_info[4]
gender       <- file_info[5]
manufacturer <- str_match(manufacturer, "\\(([^()]+)\\)")[, 2]
if (!(manufacturer %in% valid_manufacturers)) next
if (!(gender %in% valid_genders))         next
df <- read_excel(file, sheet = 1)
print(file)
if (!all(c("Adverse Event", "AE Cases", "Total Cases") %in% colnames(df))) next
df <- df %>%
mutate(`AE Cases` = as.numeric(`AE Cases`),
`Total Cases` = as.numeric(`Total Cases`))
extracted_data <- df %>%
filter(`Adverse Event` %in% target_events) %>%
mutate(Percentage = (`AE Cases` / `Total Cases`) * 100) %>%
select(`Adverse Event`, Percentage)
if (nrow(extracted_data) > 0) {
extracted_data <- extracted_data %>%
mutate(Manufacturer = manufacturer,
Gender       = gender,
Age_Group    = age_group)
results_df <- bind_rows(results_df, extracted_data)
}
}
results_df <- results_df[, c("Manufacturer", "Adverse Event", "Gender", "Age_Group", "Percentage")]
write_xlsx(results_df, file.path(output_dir, "top_gender_extracted_data.xlsx"))
################################################################################
###########################  Plotting (patchwork)  #############################
################################################################################
gender_colors <- c("Female" = "red", "Male" = "blue")
#
# plot_adverse_event <- function(event) {
#   event_data <- results_df %>% dplyr::filter(`Adverse Event` == event)
#
#   # Clean and relabel age groups
#   event_data <- event_data %>%
#     dplyr::mutate(
#       Age_Group = ifelse(Age_Group == "80-120", "80+", Age_Group)
#     ) %>%
#     dplyr::filter(!is.na(Age_Group), Age_Group != "90+")
#
#   # Set correct age group order
#   all_age_groups <- c("0-9", "10-19", "20-29", "30-39", "40-49",
#                       "50-59", "60-69", "70-79", "80+")
#   event_data$Age_Group <- factor(event_data$Age_Group, levels = all_age_groups)
#
#   # Relabel manufacturers
#   event_data <- event_data %>%
#     dplyr::mutate(Manufacturer = dplyr::case_when(
#       Manufacturer == "PFIZER-BIONTECH" ~ "Pfizer Monovalent",
#       Manufacturer == "PFIZER-BIONTECH_BIVALENT" ~ "Pfizer Bivalent",
#       Manufacturer == "MODERNA" ~ "Moderna Monovalent",
#       Manufacturer == "MODERNA_BIVALENT" ~ "Moderna Bivalent",
#       Manufacturer == "JANSSEN" ~ "Janssen",
#       TRUE ~ Manufacturer
#     ))
#
#   manufacturer_levels <- c("Pfizer Monovalent", "Moderna Monovalent", "Janssen",
#                            "Pfizer Bivalent", "Moderna Bivalent")
#   event_data$Manufacturer <- factor(event_data$Manufacturer, levels = manufacturer_levels)
#
#   # Determine max y value for consistent scaling (guard for all-NA)
#   max_y <- ceiling(suppressWarnings(max(event_data$Percentage, na.rm = TRUE)))
#   if (!is.finite(max_y)) max_y <- 1
#
#   plots <- lapply(manufacturer_levels, function(mfg) {
#     df <- event_data %>%
#       dplyr::filter(Manufacturer == mfg) %>%
#       dplyr::arrange(Gender, Age_Group)
#
#     df$Age_Group <- factor(df$Age_Group, levels = all_age_groups)
#
#     # Only draw lines where each Gender group has >= 2 non-NA points
#     line_df <- df %>%
#       dplyr::group_by(Gender) %>%
#       dplyr::filter(sum(!is.na(Percentage)) >= 2) %>%
#       dplyr::ungroup()
#
#     ggplot2::ggplot(df, ggplot2::aes(x = Age_Group, y = Percentage, group = Gender, color = Gender)) +
#       ggplot2::geom_line(data = line_df, linewidth = 1.5) +  # avoids 1-point line warnings
#       ggplot2::geom_point(size = 4) +
#       ggplot2::scale_x_discrete(drop = FALSE) +
#       ggplot2::scale_color_manual(values = gender_colors) +
#       ggplot2::coord_cartesian(ylim = c(0, max_y)) +
#       ggplot2::theme_minimal() +
#       ggplot2::labs(title = mfg, x = "Age Group", y = "Percentage of Cases (%)") +
#       ggplot2::theme(
#         plot.title = ggplot2::element_text(size = 16, face = "bold", hjust = 0.5),
#         axis.title.x = ggplot2::element_text(size = 14),
#         axis.title.y = ggplot2::element_text(size = 14),
#         axis.text.x  = ggplot2::element_text(size = 12, angle = 45, hjust = 1),
#         axis.text.y  = ggplot2::element_text(size = 12),
#         legend.title = ggplot2::element_text(size = 12),
#         legend.text  = ggplot2::element_text(size = 10)
#       )
#   })
#
#   line_plot <- patchwork::wrap_plots(plots, ncol = 5) +
#     patchwork::plot_layout(ncol = 5) +
#     patchwork::plot_annotation(
#       title = event,
#       theme = ggplot2::theme(
#         plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5)
#       )
#     ) &
#     ggplot2::theme(plot.margin = ggplot2::margin(t = 10, b = 20, l = 10, r = 10))
#
#   ggsave(
#     filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.png")),
#     plot = line_plot, width = 18, height = 4, bg = "white"
#   )
#
#   ggsave(
#     filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.pdf")),
#     plot = line_plot, width = 18, height = 4, device = cairo_pdf
#   )
# }
plot_adverse_event <- function(event) {
event_data <- results_df %>% dplyr::filter(`Adverse Event` == event)
# Clean and relabel age groups
event_data <- event_data %>%
dplyr::mutate(
Age_Group = ifelse(Age_Group == "80-120", "80+", Age_Group)
) %>%
dplyr::filter(!is.na(Age_Group), Age_Group != "90+")
# Set correct age group order
all_age_groups <- c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80+")
event_data$Age_Group <- factor(event_data$Age_Group, levels = all_age_groups)
# Relabel manufacturers
event_data <- event_data %>%
dplyr::mutate(Manufacturer = dplyr::case_when(
Manufacturer == "PFIZER-BIONTECH" ~ "Pfizer Monovalent",
Manufacturer == "PFIZER-BIONTECH_BIVALENT" ~ "Pfizer Bivalent",
Manufacturer == "MODERNA" ~ "Moderna Monovalent",
Manufacturer == "MODERNA_BIVALENT" ~ "Moderna Bivalent",
Manufacturer == "JANSSEN" ~ "Janssen",
TRUE ~ Manufacturer
))
manufacturer_levels <- c("Pfizer Monovalent", "Moderna Monovalent", "Janssen",
"Pfizer Bivalent", "Moderna Bivalent")
event_data$Manufacturer <- factor(event_data$Manufacturer, levels = manufacturer_levels)
# Determine max y value for consistent scaling (guard for all-NA)
max_y <- ceiling(suppressWarnings(max(event_data$Percentage, na.rm = TRUE)))
if (!is.finite(max_y)) max_y <- 1
# Build individual panels
plots <- lapply(manufacturer_levels, function(mfg) {
df <- event_data %>%
dplyr::filter(Manufacturer == mfg) %>%
dplyr::arrange(Gender, Age_Group)
df$Age_Group <- factor(df$Age_Group, levels = all_age_groups)
# Only draw lines where each Gender group has >= 2 non-NA points
line_df <- df %>%
dplyr::group_by(Gender) %>%
dplyr::filter(sum(!is.na(Percentage)) >= 2) %>%
dplyr::ungroup()
ggplot2::ggplot(df, ggplot2::aes(x = Age_Group, y = Percentage, group = Gender, color = Gender)) +
ggplot2::geom_line(data = line_df, linewidth = 1.5) +
ggplot2::geom_point(size = 4) +
ggplot2::scale_x_discrete(drop = FALSE) +
ggplot2::scale_color_manual(values = gender_colors) +
ggplot2::coord_cartesian(ylim = c(0, max_y)) +
ggplot2::theme_minimal() +
ggplot2::labs(title = mfg, x = "Age Group", y = "Percentage of Cases (%)") +
ggplot2::theme(
plot.title = ggplot2::element_text(size = 16, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
axis.text.x  = ggplot2::element_text(size = 12, angle = 45, hjust = 1),
axis.text.y  = ggplot2::element_text(size = 12),
legend.title = ggplot2::element_text(size = 12),
legend.text  = ggplot2::element_text(size = 10)
)
})
# ---- NEW: collect one legend per row ---------------------------------------
ncols <- 5  # number of columns per row
row_groups <- split(plots, ceiling(seq_along(plots) / ncols))
row_patchworks <- lapply(row_groups, function(row_plots) {
patchwork::wrap_plots(row_plots, ncol = ncols) +
patchwork::plot_layout(ncol = ncols, guides = "collect") &
ggplot2::theme(legend.position = "bottom")
})
# Stack rows vertically; with one row this is just that row
line_plot <- Reduce(`/`, row_patchworks) +
patchwork::plot_annotation(
title = event,
theme = ggplot2::theme(
plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5)
)
) &
ggplot2::theme(plot.margin = ggplot2::margin(t = 10, b = 20, l = 10, r = 10))
# ---------------------------------------------------------------------------
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.png")),
plot = line_plot, width = 18, height = 4, bg = "white"
)
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.pdf")),
plot = line_plot, width = 18, height = 4, device = cairo_pdf
)
}
################################################################################
################################  Run Jobs  ####################################
################################################################################
for (event in target_events) {
tryCatch({
plot_adverse_event(event)
}, error = function(e) {
message(paste("Skipping", event, "due to error:", e$message))
})
}
plot_adverse_event <- function(event) {
event_data <- results_df %>% dplyr::filter(`Adverse Event` == event)
# Clean and relabel age groups
event_data <- event_data %>%
dplyr::mutate(
Age_Group = ifelse(Age_Group == "80-120", "80+", Age_Group)
) %>%
dplyr::filter(!is.na(Age_Group), Age_Group != "90+")
# Set correct age group order
all_age_groups <- c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80+")
event_data$Age_Group <- factor(event_data$Age_Group, levels = all_age_groups)
# Relabel manufacturers
event_data <- event_data %>%
dplyr::mutate(Manufacturer = dplyr::case_when(
Manufacturer == "PFIZER-BIONTECH" ~ "Pfizer Monovalent",
Manufacturer == "PFIZER-BIONTECH_BIVALENT" ~ "Pfizer Bivalent",
Manufacturer == "MODERNA" ~ "Moderna Monovalent",
Manufacturer == "MODERNA_BIVALENT" ~ "Moderna Bivalent",
Manufacturer == "JANSSEN" ~ "Janssen",
TRUE ~ Manufacturer
))
manufacturer_levels <- c("Pfizer Monovalent", "Moderna Monovalent", "Janssen",
"Pfizer Bivalent", "Moderna Bivalent")
event_data$Manufacturer <- factor(event_data$Manufacturer, levels = manufacturer_levels)
# Determine max y value for consistent scaling (guard for all-NA)
max_y <- ceiling(suppressWarnings(max(event_data$Percentage, na.rm = TRUE)))
if (!is.finite(max_y)) max_y <- 1
# Build individual panels
plots <- lapply(manufacturer_levels, function(mfg) {
df <- event_data %>%
dplyr::filter(Manufacturer == mfg) %>%
dplyr::arrange(Gender, Age_Group)
df$Age_Group <- factor(df$Age_Group, levels = all_age_groups)
# Only draw lines where each Gender group has >= 2 non-NA points
line_df <- df %>%
dplyr::group_by(Gender) %>%
dplyr::filter(sum(!is.na(Percentage)) >= 2) %>%
dplyr::ungroup()
ggplot2::ggplot(df, ggplot2::aes(x = Age_Group, y = Percentage, group = Gender, color = Gender)) +
ggplot2::geom_line(data = line_df, linewidth = 1.5) +
ggplot2::geom_point(size = 4) +
ggplot2::scale_x_discrete(drop = FALSE) +
ggplot2::scale_color_manual(values = gender_colors) +
ggplot2::coord_cartesian(ylim = c(0, max_y)) +
ggplot2::theme_minimal() +
ggplot2::labs(title = mfg, x = "Age Group", y = "Percentage of Cases (%)") +
ggplot2::theme(
plot.title = ggplot2::element_text(size = 16, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
axis.text.x  = ggplot2::element_text(size = 12, angle = 45, hjust = 1),
axis.text.y  = ggplot2::element_text(size = 12),
legend.title = ggplot2::element_text(size = 12),
legend.text  = ggplot2::element_text(size = 10)
)
})
# One legend per row, placed on the RIGHT
ncols <- 5
row_groups <- split(plots, ceiling(seq_along(plots) / ncols))
row_patchworks <- lapply(row_groups, function(row_plots) {
patchwork::wrap_plots(row_plots, ncol = ncols) +
patchwork::plot_layout(ncol = ncols, guides = "collect") &
ggplot2::theme(legend.position = "right")
})
# Stack rows vertically
line_plot <- Reduce(`/`, row_patchworks) +
patchwork::plot_annotation(
title = event,
theme = ggplot2::theme(
plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5)
)
) &
ggplot2::theme(plot.margin = ggplot2::margin(t = 10, b = 20, l = 10, r = 10))
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.png")),
plot = line_plot, width = 18, height = 4, bg = "white"
)
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.pdf")),
plot = line_plot, width = 18, height = 4, device = cairo_pdf
)
}
plot_adverse_event <- function(event) {
event_data <- results_df %>% dplyr::filter(`Adverse Event` == event)
# Clean and relabel age groups
event_data <- event_data %>%
dplyr::mutate(
Age_Group = ifelse(Age_Group == "80-120", "80+", Age_Group)
) %>%
dplyr::filter(!is.na(Age_Group), Age_Group != "90+")
# Set correct age group order
all_age_groups <- c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80+")
event_data$Age_Group <- factor(event_data$Age_Group, levels = all_age_groups)
# Relabel manufacturers
event_data <- event_data %>%
dplyr::mutate(Manufacturer = dplyr::case_when(
Manufacturer == "PFIZER-BIONTECH" ~ "Pfizer Monovalent",
Manufacturer == "PFIZER-BIONTECH_BIVALENT" ~ "Pfizer Bivalent",
Manufacturer == "MODERNA" ~ "Moderna Monovalent",
Manufacturer == "MODERNA_BIVALENT" ~ "Moderna Bivalent",
Manufacturer == "JANSSEN" ~ "Janssen",
TRUE ~ Manufacturer
))
manufacturer_levels <- c("Pfizer Monovalent", "Moderna Monovalent", "Janssen",
"Pfizer Bivalent", "Moderna Bivalent")
event_data$Manufacturer <- factor(event_data$Manufacturer, levels = manufacturer_levels)
# Determine max y value for consistent scaling (guard for all-NA)
max_y <- ceiling(suppressWarnings(max(event_data$Percentage, na.rm = TRUE)))
if (!is.finite(max_y)) max_y <- 1
# Build individual panels
plots <- lapply(manufacturer_levels, function(mfg) {
df <- event_data %>%
dplyr::filter(Manufacturer == mfg) %>%
dplyr::arrange(Gender, Age_Group)
df$Age_Group <- factor(df$Age_Group, levels = all_age_groups)
# Only draw lines where each Gender group has >= 2 non-NA points
line_df <- df %>%
dplyr::group_by(Gender) %>%
dplyr::filter(sum(!is.na(Percentage)) >= 2) %>%
dplyr::ungroup()
ggplot2::ggplot(df, ggplot2::aes(x = Age_Group, y = Percentage, group = Gender, color = Gender)) +
ggplot2::geom_line(data = line_df, linewidth = 1.5) +
ggplot2::geom_point(size = 4) +
ggplot2::scale_x_discrete(drop = FALSE) +
ggplot2::scale_color_manual(values = gender_colors) +
ggplot2::coord_cartesian(ylim = c(0, max_y)) +
ggplot2::theme_minimal() +
ggplot2::labs(title = mfg, x = "Age Group", y = "Percentage of Cases (%)") +
ggplot2::theme(
plot.title = ggplot2::element_text(size = 16, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
axis.text.x  = ggplot2::element_text(size = 12, angle = 45, hjust = 1),
axis.text.y  = ggplot2::element_text(size = 12),
legend.title = ggplot2::element_text(size = 12),
legend.text  = ggplot2::element_text(size = 10)
)
})
# One legend per row, placed on the RIGHT
ncols <- 5
row_groups <- split(plots, ceiling(seq_along(plots) / ncols))
row_patchworks <- lapply(row_groups, function(row_plots) {
patchwork::wrap_plots(row_plots, ncol = ncols) +
patchwork::plot_layout(ncol = ncols, guides = "collect") &
ggplot2::theme(legend.position = "right")
})
# Stack rows vertically
line_plot <- Reduce(`/`, row_patchworks) +
patchwork::plot_annotation(
title = event,
theme = ggplot2::theme(
plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5)
)
) &
ggplot2::theme(plot.margin = ggplot2::margin(t = 10, b = 20, l = 10, r = 10))
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.png")),
plot = line_plot, width = 18, height = 4, bg = "white"
)
ggsave(
filename = file.path(output_dir, paste0(event, "_Filtered_LinePlot.pdf")),
plot = line_plot, width = 18, height = 4, device = cairo_pdf
)
}
for (event in target_events) {
tryCatch({
plot_adverse_event(event)
}, error = function(e) {
message(paste("Skipping", event, "due to error:", e$message))
})
}
getwd()
renv::snapshot()
